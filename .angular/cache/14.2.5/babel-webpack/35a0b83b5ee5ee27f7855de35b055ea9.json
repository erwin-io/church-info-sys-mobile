{"ast":null,"code":"import { of } from 'rxjs';\nimport { environment } from '../../../environments/environment';\nimport { catchError, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./app-config.service\";\nimport * as i3 from \"./user.service\";\nimport * as i4 from \"../storage/storage.service\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, appconfig, userService, storageService) {\n      this.http = http;\n      this.appconfig = appconfig;\n      this.userService = userService;\n      this.storageService = storageService;\n      this.isLoggedIn = false;\n    }\n\n    login(data) {\n      return this.http.post(environment.apiBaseUrl + this.appconfig.config.apiEndPoints.auth.login, data).pipe(tap(_ => this.isLoggedIn = true), catchError(this.handleError('login', [])));\n    }\n\n    logout() {\n      const currentUser = this.storageService.getLoginUser();\n\n      if (currentUser) {\n        this.userService.updateFirebaseToken({\n          userId: currentUser.userId,\n          firebaseToken: ''\n        });\n      }\n\n      this.storageService.saveAccessToken(null);\n      this.storageService.saveRefreshToken(null);\n      this.storageService.saveLoginUser(null);\n      this.storageService.saveSessionExpiredDate(null);\n      this.storageService.saveTotalUnreadNotif(0);\n      window.location.href = 'login';\n      return this.http.get(environment.apiBaseUrl + this.appconfig.config.apiEndPoints.auth.logout).pipe(tap(_ => this.isLoggedIn = false), catchError(this.handleError('logout', [])));\n    }\n\n    register(data) {\n      return this.http.post(environment.apiBaseUrl + this.appconfig.config.apiEndPoints.auth.register, data).pipe(tap(_ => this.log('register')), catchError(this.handleError('register', [])));\n    }\n\n    findByUsername(username) {\n      return this.http.get(environment.apiBaseUrl + this.appconfig.config.apiEndPoints.auth.findByUsername + username).pipe(tap(_ => this.log('findByUsername')), catchError(this.handleError('findByUsername', [])));\n    }\n\n    refreshToken(data) {\n      return this.http.post(environment.apiBaseUrl + this.appconfig.config.apiEndPoints.auth.refreshToken, data).pipe(tap(_ => this.log('refresh token')), catchError(this.handleError('refresh token', [])));\n    }\n\n    verifyOtp(data) {\n      return this.http.post(environment.apiBaseUrl + this.appconfig.config.apiEndPoints.auth.verifyOtp, data).pipe(tap(_ => this.isLoggedIn = true), catchError(this.handleError('verify-otp', [])));\n    }\n\n    handleError(operation = 'operation', result) {\n      return error => {\n        this.log(`${operation} failed: ${Array.isArray(error.error.message) ? error.error.message[0] : error.error.message}`);\n        return of(error.error);\n      };\n    }\n\n    log(message) {\n      console.log(message);\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AppConfigService), i0.ɵɵinject(i3.UserService), i0.ɵɵinject(i4.StorageService));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}