{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"src/app/core/services/auth.service\";\nimport * as i4 from \"src/app/core/services/user.service\";\nimport * as i5 from \"@ionic/angular\";\nimport * as i6 from \"src/app/core/storage/storage.service\";\nimport * as i7 from \"src/app/core/ui-service/loader.service\";\nimport * as i8 from \"src/app/core/services/app-config.service\";\nimport * as i9 from \"src/app/core/ui-service/page-loader.service\";\nimport * as i10 from \"@angular/material/button\";\nimport * as i11 from \"@angular/material/form-field\";\nimport * as i12 from \"@angular/material/input\";\nexport let VerifyOtpPage = /*#__PURE__*/(() => {\n  class VerifyOtpPage {\n    constructor(formBuilder, router, authService, userService, alertController, storageService, loaderService, appconfig, pageLoaderService) {\n      this.formBuilder = formBuilder;\n      this.router = router;\n      this.authService = authService;\n      this.userService = userService;\n      this.alertController = alertController;\n      this.storageService = storageService;\n      this.loaderService = loaderService;\n      this.appconfig = appconfig;\n      this.pageLoaderService = pageLoaderService;\n      this.isSubmitting = false;\n      this.sessionTimeout = Number(this.appconfig.config.sessionConfig.sessionTimeout);\n    }\n\n    get formData() {\n      return Object.assign(Object.assign({}, this.verifyOtpForm.value), {\n        userId: this.userId\n      });\n    }\n\n    ngOnInit() {\n      if (window.history.state && window.history.state.data && window.history.state.data.userId) {\n        this.userId = window.history.state.data.userId;\n        console.log(window.history.state.data);\n      } else {\n        this.router.navigate(['/login'], {\n          replaceUrl: true\n        });\n      }\n\n      this.verifyOtpForm = this.formBuilder.group({\n        otp: [null, Validators.required]\n      });\n    }\n\n    onFormSubmit() {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (!this.verifyOtpForm.valid) {\n          return;\n        }\n\n        const params = this.formData;\n        console.log(params);\n\n        try {\n          this.isSubmitting = true;\n          yield this.pageLoaderService.open('Verifying please wait...');\n          this.authService.verifyOtp(params).subscribe(res => __awaiter(this, void 0, void 0, function* () {\n            yield this.pageLoaderService.close();\n\n            if (res.success) {\n              this.storageService.saveRefreshToken(res.data.accessToken);\n              this.storageService.saveAccessToken(res.data.refreshToken);\n              this.storageService.saveTotalUnreadNotif(res.data.totalUnreadNotif);\n              const today = new Date();\n              today.setTime(today.getTime() + this.sessionTimeout * 1000);\n              this.storageService.saveSessionExpiredDate(today);\n              const userData = res.data;\n              this.storageService.saveLoginUser(userData);\n              this.router.navigate(['/'], {\n                replaceUrl: true\n              });\n              this.isSubmitting = false;\n            } else {\n              this.isSubmitting = false;\n              yield this.presentAlert({\n                header: 'Try again!',\n                message: Array.isArray(res.message) ? res.message[0] : res.message,\n                buttons: ['OK']\n              });\n            }\n          }), err => __awaiter(this, void 0, void 0, function* () {\n            yield this.pageLoaderService.close();\n            console.log(err);\n            this.isSubmitting = false;\n            yield this.presentAlert({\n              header: 'Try again!',\n              subHeader: '',\n              message: Array.isArray(err.message) ? err.message[0] : err.message,\n              buttons: ['OK']\n            });\n          }));\n        } catch (e) {\n          yield this.pageLoaderService.close();\n          console.log(e);\n          this.isSubmitting = false;\n          yield this.presentAlert({\n            header: 'Try again!',\n            subHeader: '',\n            message: Array.isArray(e.message) ? e.message[0] : e.message,\n            buttons: ['OK']\n          });\n        }\n      });\n    }\n\n    presentAlert(options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const alert = yield this.alertController.create(options);\n        yield alert.present();\n      });\n    }\n\n  }\n\n  VerifyOtpPage.ɵfac = function VerifyOtpPage_Factory(t) {\n    return new (t || VerifyOtpPage)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.AuthService), i0.ɵɵdirectiveInject(i4.UserService), i0.ɵɵdirectiveInject(i5.AlertController), i0.ɵɵdirectiveInject(i6.StorageService), i0.ɵɵdirectiveInject(i7.LoaderService), i0.ɵɵdirectiveInject(i8.AppConfigService), i0.ɵɵdirectiveInject(i9.PageLoaderService));\n  };\n\n  VerifyOtpPage.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: VerifyOtpPage,\n    selectors: [[\"app-verify-otp\"]],\n    decls: 20,\n    vars: 2,\n    consts: [[1, \"verify-otp\", \"container\"], [1, \"form-container\"], [3, \"formGroup\", \"ngSubmit\"], [3, \"disabled\"], [1, \"form-field-group\"], [1, \"verify-otp-text\"], [\"appearance\", \"outline\"], [\"matInput\", \"\", \"type\", \"text\", \"placeholder\", \"OTP\", \"formControlName\", \"otp\", \"oninput\", \"this.value = this.value.toLowerCase()\"], [1, \"action\"], [\"type\", \"submit\", \"mat-flat-button\", \"\", \"color\", \"primary\"], [1, \"verify-otp-footer\"], [\"routerLink\", \"/login\", \"replaceUrl\", \"true\"]],\n    template: function VerifyOtpPage_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-content\")(1, \"div\", 0)(2, \"div\", 1)(3, \"form\", 2);\n        i0.ɵɵlistener(\"ngSubmit\", function VerifyOtpPage_Template_form_ngSubmit_3_listener() {\n          return ctx.onFormSubmit();\n        });\n        i0.ɵɵelementStart(4, \"fieldset\", 3)(5, \"div\", 4)(6, \"span\", 5);\n        i0.ɵɵtext(7, \"Verify OTP\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(8, \"div\", 4)(9, \"mat-form-field\", 6)(10, \"mat-label\");\n        i0.ɵɵtext(11, \"OTP\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(12, \"input\", 7);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(13, \"div\", 8)(14, \"button\", 9);\n        i0.ɵɵtext(15, \"Verify\");\n        i0.ɵɵelementEnd()()()()();\n        i0.ɵɵelementStart(16, \"div\", 10)(17, \"span\")(18, \"a\", 11);\n        i0.ɵɵtext(19, \"Back to login\");\n        i0.ɵɵelementEnd()()()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"formGroup\", ctx.verifyOtpForm);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"disabled\", ctx.isSubmitting);\n      }\n    },\n    dependencies: [i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i5.IonContent, i5.RouterLinkWithHrefDelegate, i2.RouterLinkWithHref, i10.MatButton, i11.MatFormField, i11.MatLabel, i12.MatInput],\n    styles: [\".container[_ngcontent-%COMP%]{height:100%;display:flex;padding:0 40px!important}.container.verify-otp[_ngcontent-%COMP%]{flex-direction:column;justify-content:flex-start!important}.container.verify-otp[_ngcontent-%COMP%]   .welcome[_ngcontent-%COMP%]{text-transform:uppercase;white-space:pre;overflow:visible;font-weight:400;font-style:normal;font-family:Sumana,serif;color:#247881;font-size:23px;letter-spacing:0px;line-height:1.2;text-align:center;margin:0 0 25px!important}.container.verify-otp[_ngcontent-%COMP%]   .app_banner[_ngcontent-%COMP%]{display:flex;flex-grow:1;height:104px;justify-content:center;margin-bottom:57px!important}.container.verify-otp[_ngcontent-%COMP%]   .app_banner[_ngcontent-%COMP%]   .image-container[_ngcontent-%COMP%]{width:299px}.container.verify-otp[_ngcontent-%COMP%]   .app_banner[_ngcontent-%COMP%]   .image-container[_ngcontent-%COMP%]   img[_ngcontent-%COMP%]{width:100%;height:100%;background-repeat:no-repeat;background-position:center center;background-size:cover}.container.verify-otp[_ngcontent-%COMP%]   .verify-otp-text[_ngcontent-%COMP%]{text-align:center}.container.verify-otp[_ngcontent-%COMP%]   span[_ngcontent-%COMP%], .container.verify-otp[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{font-size:16px;letter-spacing:0px;line-height:1.2}.container.verify-otp[_ngcontent-%COMP%]   .form-container[_ngcontent-%COMP%]{display:flex;flex-grow:1;flex-direction:row;justify-content:center;align-items:center;width:100%!important}.container.verify-otp[_ngcontent-%COMP%]   .form-container[_ngcontent-%COMP%]   .action[_ngcontent-%COMP%]{flex-grow:1;display:flex;flex-direction:column;row-gap:5px}.container.verify-otp[_ngcontent-%COMP%]   .form-container[_ngcontent-%COMP%]   .action[_ngcontent-%COMP%]   *[_ngcontent-%COMP%]{flex-grow:1}.container.verify-otp[_ngcontent-%COMP%]   .form-container[_ngcontent-%COMP%]   .action[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{height:53px;font-size:16px;letter-spacing:0px;line-height:1.2}.container.verify-otp[_ngcontent-%COMP%]   .verify-otp-footer[_ngcontent-%COMP%]{display:flex;align-items:center;flex-direction:column;height:103px;justify-content:flex-end;padding:20px 0}.container.verify-otp[_ngcontent-%COMP%]   .verify-otp-footer[_ngcontent-%COMP%]   *[_ngcontent-%COMP%]{color:#000!important}.container.verify-otp[_ngcontent-%COMP%]   .verify-otp-footer[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]{text-decoration:underline}\"]\n  });\n  return VerifyOtpPage;\n})();","map":null,"metadata":{},"sourceType":"module"}