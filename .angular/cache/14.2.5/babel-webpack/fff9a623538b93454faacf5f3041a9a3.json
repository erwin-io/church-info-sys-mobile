{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { tap, catchError } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./app-config.service\";\nexport let ReservationService = /*#__PURE__*/(() => {\n  class ReservationService {\n    constructor(http, appconfig) {\n      this.http = http;\n      this.appconfig = appconfig;\n    }\n\n    getByStatus(params) {\n      return this.http.get(environment.apiBaseUrl + this.appconfig.config.apiEndPoints.reservation.getByStatus, {\n        params\n      }).pipe(tap(_ => this.log('reservation')), catchError(this.handleError('reservation', [])));\n    }\n\n    getById(reservationId) {\n      return this.http.get(environment.apiBaseUrl + this.appconfig.config.apiEndPoints.reservation.getById + reservationId).pipe(tap(_ => this.log('reservation')), catchError(this.handleError('reservation', [])));\n    }\n\n    getReservationsForADay(dateString) {\n      return this.http.get(environment.apiBaseUrl + this.appconfig.config.apiEndPoints.reservation.getReservationForADay + dateString).pipe(tap(_ => this.log('reservation')), catchError(this.handleError('reservation', [])));\n    }\n\n    createReservation(data) {\n      return this.http.post(environment.apiBaseUrl + this.appconfig.config.apiEndPoints.reservation.createReservation, data).pipe(tap(_ => this.log('reservation')), catchError(this.handleError('reservation', [])));\n    }\n\n    rescheduleReservation(data) {\n      return this.http.put(environment.apiBaseUrl + this.appconfig.config.apiEndPoints.reservation.rescheduleReservation, data).pipe(tap(_ => this.log('reservation')), catchError(this.handleError('reservation', [])));\n    }\n\n    updateReservationStatus(data) {\n      return this.http.put(environment.apiBaseUrl + this.appconfig.config.apiEndPoints.reservation.updateReservationStatus, data).pipe(tap(_ => this.log('reservation')), catchError(this.handleError('reservation', [])));\n    }\n\n    handleError(operation = 'operation', result) {\n      return error => {\n        this.log(`${operation} failed: ${Array.isArray(error.error.message) ? error.error.message[0] : error.error.message}`);\n        return of(error.error);\n      };\n    }\n\n    log(message) {\n      console.log(message);\n    }\n\n  }\n\n  ReservationService.ɵfac = function ReservationService_Factory(t) {\n    return new (t || ReservationService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AppConfigService));\n  };\n\n  ReservationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ReservationService,\n    factory: ReservationService.ɵfac,\n    providedIn: 'root'\n  });\n  return ReservationService;\n})();","map":null,"metadata":{},"sourceType":"module"}