{"ast":null,"code":"import { of } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./app-config.service\";\nexport let UserService = /*#__PURE__*/(() => {\n  class UserService {\n    constructor(http, appconfig) {\n      this.http = http;\n      this.appconfig = appconfig;\n    }\n\n    getStaffByAdvanceSearch(params) {\n      return this.http.get(environment.apiBaseUrl + this.appconfig.config.apiEndPoints.user.getStaffByAdvanceSearch, {\n        params\n      }).pipe(tap(_ => this.log('user')), catchError(this.handleError('user', [])));\n    }\n\n    getClientByAdvanceSearch(params) {\n      return this.http.get(environment.apiBaseUrl + this.appconfig.config.apiEndPoints.user.getClientByAdvanceSearch, {\n        params\n      }).pipe(tap(_ => this.log('user')), catchError(this.handleError('user', [])));\n    }\n\n    getStaff() {\n      return this.http.get(environment.apiBaseUrl + this.appconfig.config.apiEndPoints.user.get + 1).pipe(tap(_ => this.log('user')), catchError(this.handleError('user', [])));\n    }\n\n    getClients() {\n      return this.http.get(environment.apiBaseUrl + this.appconfig.config.apiEndPoints.user.get + 2).pipe(tap(_ => this.log('user')), catchError(this.handleError('user', [])));\n    }\n\n    getById(userId) {\n      return this.http.get(environment.apiBaseUrl + this.appconfig.config.apiEndPoints.user.getById + userId).pipe(tap(_ => this.log('user')), catchError(this.handleError('user', [])));\n    }\n\n    createClient(data) {\n      return this.http.post(environment.apiBaseUrl + this.appconfig.config.apiEndPoints.user.createClient, data).pipe(tap(_ => this.log('user')), catchError(this.handleError('user', [])));\n    }\n\n    udpdateClient(data) {\n      return this.http.put(environment.apiBaseUrl + this.appconfig.config.apiEndPoints.user.udpdateClient, data).pipe(tap(_ => this.log('user')), catchError(this.handleError('user', [])));\n    }\n\n    changePassword(data) {\n      return this.http.put(environment.apiBaseUrl + this.appconfig.config.apiEndPoints.user.changePassword, data).pipe(tap(_ => this.log('user')), catchError(this.handleError('user', [])));\n    }\n\n    updateFirebaseToken(data) {\n      return this.http.put(environment.apiBaseUrl + this.appconfig.config.apiEndPoints.user.updateFirebaseToken, data).pipe(tap(_ => this.log('user')), catchError(this.handleError('user', [])));\n    }\n\n    updateClientProfilePicture(data) {\n      return this.http.put(environment.apiBaseUrl + this.appconfig.config.apiEndPoints.user.updateClientProfilePicture, data).pipe(tap(_ => this.log('user')), catchError(this.handleError('user', [])));\n    }\n\n    handleError(operation = 'operation', result) {\n      return error => {\n        this.log(`${operation} failed: ${Array.isArray(error.error.message) ? error.error.message[0] : error.error.message}`);\n        return of(error.error);\n      };\n    }\n\n    log(message) {\n      console.log(message);\n    }\n\n  }\n\n  UserService.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AppConfigService));\n  };\n\n  UserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n  return UserService;\n})();","map":null,"metadata":{},"sourceType":"module"}