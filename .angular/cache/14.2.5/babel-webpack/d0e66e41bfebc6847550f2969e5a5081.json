{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { HttpRequest, HttpHandler, HttpEvent, HttpErrorResponse } from '@angular/common/http';\nimport { BehaviorSubject, throwError } from 'rxjs';\nimport { catchError, filter, switchMap, take } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@ionic/angular\";\nimport * as i3 from \"../services/auth.service\";\nimport * as i4 from \"../storage/storage.service\";\nexport let TokenInterceptor = /*#__PURE__*/(() => {\n  class TokenInterceptor {\n    constructor(router, toastController, authService, storageService) {\n      this.router = router;\n      this.toastController = toastController;\n      this.authService = authService;\n      this.storageService = storageService;\n      this.isRefreshing = false;\n      this.refreshTokenSubject = new BehaviorSubject(null);\n      this.hiddenURLKeyword = ['g.payx.ph'];\n    }\n\n    intercept(request, next) {\n      if (this.hiddenURLKeyword.filter(x => request.url.includes(x)).length <= 0) {\n        const token = this.storageService.getAccessToken();\n\n        if (token) {\n          request = this.addTokenHeader(request, token);\n        }\n\n        request = request.clone({\n          headers: request.headers.set('Accept', 'application/json')\n        });\n\n        if (!request.headers.has('Content-Type')) {\n          request = request.clone({\n            setHeaders: {\n              'content-type': 'application/json'\n            }\n          });\n        }\n\n        return next.handle(request).pipe(catchError(error => {\n          if (error instanceof HttpErrorResponse && !request.url.includes('auth/signin') && error.status === 401) {\n            return this.handle401Error(request, next);\n          }\n\n          return throwError(error);\n        }));\n      } else {\n        return next.handle(request).pipe(catchError(error => throwError(error)));\n      }\n    }\n\n    handle401Error(request, next) {\n      if (!this.isRefreshing) {\n        this.isRefreshing = true;\n        this.refreshTokenSubject.next(null);\n        const refreshToken = this.storageService.getRefreshToken();\n        const {\n          userId\n        } = this.storageService.getLoginUser();\n\n        if (refreshToken || refreshToken === undefined || refreshToken !== 'null') {\n          return this.authService // eslint-disable-next-line @typescript-eslint/naming-convention\n          .refreshToken({\n            userId,\n            refresh_token: refreshToken\n          }).pipe(switchMap(token => {\n            this.isRefreshing = false;\n            this.storageService.saveAccessToken(token.accessToken);\n            this.storageService.saveRefreshToken(token.refreshToken);\n            this.refreshTokenSubject.next(token.accessToken);\n            return next.handle(this.addTokenHeader(request, token.accessToken));\n          }), catchError(error => {\n            this.isRefreshing = false;\n\n            if ((error.error.success !== undefined || error.error.success !== null) && error.error.success === false) {} else {\n              console.log('logout from interceptor');\n              this.handleLogout();\n            }\n\n            return throwError(error);\n          }));\n        } else {\n          console.log('logout from interceptor');\n          this.handleLogout();\n          this.isRefreshing = false;\n        }\n      }\n\n      return this.refreshTokenSubject.pipe(filter(token => token !== null), take(1), switchMap(token => next.handle(this.addTokenHeader(request, token))));\n    }\n\n    addTokenHeader(request, token) {\n      request = request.clone({\n        setHeaders: {\n          // eslint-disable-next-line quote-props, @typescript-eslint/naming-convention\n          Authorization: 'Bearer ' + token\n        }\n      });\n      return request;\n    }\n\n    handleLogout() {\n      this.presentToast('Session expired');\n      this.authService.logout();\n    }\n\n    presentToast(msg) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const toast = yield this.toastController.create({\n          message: msg,\n          duration: 2000,\n          position: 'top'\n        });\n        toast.present();\n      });\n    }\n\n  }\n\n  TokenInterceptor.ɵfac = function TokenInterceptor_Factory(t) {\n    return new (t || TokenInterceptor)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.ToastController), i0.ɵɵinject(i3.AuthService), i0.ɵɵinject(i4.StorageService));\n  };\n\n  TokenInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TokenInterceptor,\n    factory: TokenInterceptor.ɵfac\n  });\n  return TokenInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}